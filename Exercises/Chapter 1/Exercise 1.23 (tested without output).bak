#lang racket/base
(require racket/trace)
(define (runtime) (current-inexact-milliseconds))

;; exercise 1.23
(define (next input)
  (if (= input 2)
      3
      (+ input 2)))

(define (new-smallest-divisor n)
  (new-find-divisor n 2))

(define (new-find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (new-find-divisor n (next test-divisor)))))

(define (divides? a b)
  (= (remainder b a) 0))

(define (new-timed-prime-test n)
  (newline)
  (new-start-prime-test n (runtime)))

(define (new-start-prime-test n start-time)
  (if (new-prime? n)
      (report-prime (- (runtime) start-time))
      (display "")
      ))

(define (new-prime? n)
  (cond ((< n 2) #f)
        ((= (new-smallest-divisor n) n) #t)
        (else #f)))


;; Tests
(trace find-divisor)
(trace new-find-divisor)

(find-divisor 1009 2)
(new-find-divisor 1009 2)


;1009
;1013
;1019

;10007
;10009
;10037

;1000003
;1000033
;1000037

(display "New timed prime test")
(newline)
(new-timed-prime-test 1009)
(new-timed-prime-test 1013)
(new-timed-prime-test 1019)
(new-timed-prime-test 10007)
(new-timed-prime-test 10009)
(new-timed-prime-test 10037)
(new-timed-prime-test 100003)
(new-timed-prime-test 100019)
(new-timed-prime-test 100043)
(newline)
(display "************************")
(newline)
(newline)
(display "Old timed prime test")
(newline)
(timed-prime-test 1009)
(timed-prime-test 1013)
(timed-prime-test 1019)
(timed-prime-test 10007)
(timed-prime-test 10009)
(timed-prime-test 10037)
(timed-prime-test 100003)
(timed-prime-test 100019)

;; Output