#lang racket/base
;; exercise 1.22
(define (square x) (* x x))
(define (sum-of-squares x y)
  (+ (square x) (square y)))
(define (even? x)
  (= (remainder x 2) 0))

(define (smallest-divisor n)
  (find-divisor n 2))

(define (find-divisor n test-divisor)
 (cond ((> (square test-divisor) n) n)
       ((= (remainder n test-divisor) 0) test-divisor)
       (else (find-divisor n (+ test-divisor 1)))))

(define (prime? n)
  (cond ((< n 2) #f)
        ((= (smallest-divisor n) n) #t)
        (else #f)))