#lang sicp
(define (make-table) 
     (define local-table (cons '*table* '())) 
     (define (get-key table) (caaar table)) 
     (define (get-value item)  
         (if (pair? (car item)) 
             (if (null? (cdar item)) 
                 #f 
                 (cdar item)) 
             #f)) 
     (define (change-value item value) (set-cdr! (car item) value)) 
     (define (add-subtable table key value) (set-cdr! table  
                                                      (cons (cons (cons key value) 
                                                                  '()) 
                                                            (cdr table)))) 
     (define (assoc key table) 
         (cond ((null? table) #f)  
               ((eq? key (get-key table)) (car table)) 
               (else (assoc key (cdr table))))) 
     (define (lookup keys) 
         (define (iter keys table) 
             (if (null? keys) 
                 (begin (display table) (get-value table)) 
                 (let ((result (assoc (car keys) (cdr table)))) 
                      (if result 
                         (iter (cdr keys) result) 
                         #f)))) 
         (iter keys local-table)) 
     (define (insert! keys value) 
         (define (iter value keys table) 
             (let ((result (assoc (car keys) (cdr table)))) 
                  (if (null? (cdr keys)) 
                     (if result 
                         (change-value result value) 
                         (add-subtable table (car keys) value)) 
                     (if result 
                         (iter value (cdr keys) result) 
                         (begin (add-subtable table (car keys) '()) 
                                (iter value (cdr keys) (cadr table))))))) 
         (iter value keys local-table)) 
     (define (dispatch m) 
         (cond ((eq? m 'insert!) insert!) 
               ((eq? m 'lookup) lookup) 
               ((eq? m 'print) local-table)))
     dispatch)


(define a (make-table))
(define get (a 'lookup))
(define put (a 'insert!))
(define state (a 'print))

(put (list 1 2) 'k1)
(get (list 1))
(put (list 2 4 5) 'k3)
(get (list 2 4 5))
(put (list 'a 'b 'c 'd) 'e)
(get (list 'a 'b))
(get (list 'a 'b 'c 'd))
state 