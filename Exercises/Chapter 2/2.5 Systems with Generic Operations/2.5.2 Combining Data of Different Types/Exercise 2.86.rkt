#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 8.0 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 34 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mrl"
 #"ib\"))\x00"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 79
(1
 #"((lib \"srcloc-snip.rkt\" \"framework\") (lib \"wxme-srcloc-snip.rkt"
 #"\" \"framework\"))\x00"
) 1 0 93
(2
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-snip"
 #"class-wxme.ss\" \"framework\"))\x00"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(3
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsis"
 #"-snip-wxme.rkt\" \"drracket\" \"private\"))\x00"
) 2 0 88
(4
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.rk"
 #"t\" \"drracket\" \"private\"))\x00"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 83 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 9 #"Consolas\0"
0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 119 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 204 204 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 144 179 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1 1 1 128 255 255 0 0 0 -1
-1 2 38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1 1 1 255 255 128 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 90 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1 1 1 0 255 0 0 0 0 -1 -1
2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1 1 1 255 128 192 0 0 0 -1
-1 2 35 #"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 144 179 255 0 0 0 -1 -1 2
39 #"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 144 179 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 144 179 255 0 0 0 -1 -1 2
42 #"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1 1 1 255 255 255 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 204 204 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 144 179 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 204 204 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 204 204 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 204 204 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 100 149 237 0 0 0 -1 -1 0
42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 50 205 50 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 152 251 152 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1 4
32 #"widget.rkt::browser-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 59
#"macro-debugger/syntax-browser/properties color-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 60 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 190 190 190 0 0 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 255 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 185 220 113 0 0 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 155 255 155 0 0 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 116 116 0 0 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 18 67 155 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 30 70 190 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 75 135 185 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 208 208 0 0 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 116 116 255 0 0 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 125 255 0 0 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 143 15 223 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 141 19 5 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 244 194 71 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 127 0 0 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 86 86 86 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 255 255 30 3 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 255 255 0 31 31 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 0 0 0 31 31 -1 -1
          0 5048 0 28 3 12 #"#lang scheme"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; Exercise 2.85"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; Helper math procedures"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";; Helper list functions"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"find"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 3 #")  "
0 0 17 3 47 #";; returns true if item is in list, else false."
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"find"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"index"
0 0 24 3 1 #" "
0 0 14 3 4 #"elem"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 3 #")  "
0 0 17 3 103
(5
 #";; returns false if elem is not in list. else, returns the index of e"
 #"lem in list. list is indexed at 0."
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"iter"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 1 #" "
0 0 14 3 6 #"result"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"elem"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 3 #")) "
0 0 14 3 6 #"result"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 4 #"iter"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 6 #"result"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 4 #"find"
0 0 24 3 1 #" "
0 0 14 3 4 #"elem"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"iter"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"higher"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 3 #")  "
0 0 17 3 93
(6
 #";; returns the element that is higher in the list. if one does not ex"
 #"ist, then returns false."
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 1 #"i"
0 0 24 3 2 #" ("
0 0 14 3 5 #"index"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 1 #"j"
0 0 24 3 2 #" ("
0 0 14 3 5 #"index"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 1 #"j"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 1 #"j"
0 0 24 3 2 #") "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"lower"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 1 #"i"
0 0 24 3 2 #" ("
0 0 14 3 5 #"index"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 1 #"j"
0 0 24 3 2 #" ("
0 0 14 3 5 #"index"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 1 #"j"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 1 #"j"
0 0 24 3 2 #") "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; GET and PUT procedures"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-array"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-entry"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"key"
0 0 24 3 1 #" "
0 0 14 3 5 #"entry"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"entry"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"value"
0 0 24 3 1 #" "
0 0 14 3 5 #"entry"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 5 #"entry"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"put-helper"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 5 #"array"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"array"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #"("
0 0 14 3 10 #"make-entry"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"key"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"array"
0 0 24 3 3 #")) "
0 0 14 3 1 #"k"
0 0 24 3 2 #") "
0 0 14 3 5 #"array"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"array"
0 0 24 3 3 #") ("
0 0 14 3 10 #"put-helper"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"array"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 12 #"global-array"
0 0 24 3 2 #" ("
0 0 14 3 10 #"put-helper"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 2 #") "
0 0 14 3 12 #"global-array"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"get"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"get-helper"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 5 #"array"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"array"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"key"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"array"
0 0 24 3 3 #")) "
0 0 14 3 1 #"k"
0 0 24 3 3 #") ("
0 0 14 3 5 #"value"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"array"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"get-helper"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"array"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"get-helper"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 2 #") "
0 0 14 3 12 #"global-array"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"global-array1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-entry1"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"key1"
0 0 24 3 1 #" "
0 0 14 3 5 #"entry"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"entry"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"value1"
0 0 24 3 1 #" "
0 0 14 3 5 #"entry"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 5 #"entry"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"put-coercion"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"put-helper1"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 5 #"array"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"array"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-entry1"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"key1"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"array"
0 0 24 3 3 #")) "
0 0 14 3 1 #"k"
0 0 24 3 2 #") "
0 0 14 3 5 #"array"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"array"
0 0 24 3 3 #") ("
0 0 14 3 11 #"put-helper1"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"array"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 13 #"global-array1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"put-helper1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 2 #") "
0 0 14 3 13 #"global-array1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"get-coercion"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"get-helper1"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 5 #"array"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"array"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"key1"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"array"
0 0 24 3 3 #")) "
0 0 14 3 1 #"k"
0 0 24 3 3 #") ("
0 0 14 3 6 #"value1"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"array"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 11 #"get-helper1"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"array"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"get-helper1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 2 #") "
0 0 14 3 13 #"global-array1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";; Tagged Data"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"attach-tag"
0 0 24 3 1 #" "
0 0 14 3 8 #"type-tag"
0 0 24 3 1 #" "
0 0 14 3 8 #"contents"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 8 #"contents"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 8 #"contents"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 8 #"type-tag"
0 0 24 3 1 #" "
0 0 14 3 8 #"contents"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"type-tag"
0 0 24 3 1 #" "
0 0 14 3 5 #"datum"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 5 #"datum"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"exact?"
0 0 24 3 1 #" "
0 0 14 3 5 #"datum"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 7 #"integer"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"real"
0 0 24 3 5 #"))   "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 5 #"pair?"
0 0 24 3 1 #" "
0 0 14 3 5 #"datum"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"datum"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 30 #"\"Bad tagged datum -- TYPE-TAG\""
0 0 24 3 1 #" "
0 0 14 3 5 #"datum"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"contents"
0 0 24 3 1 #" "
0 0 14 3 5 #"datum"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 5 #"datum"
0 0 24 3 2 #") "
0 0 14 3 5 #"datum"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 5 #"pair?"
0 0 24 3 1 #" "
0 0 14 3 5 #"datum"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"datum"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 30 #"\"Bad tagged datum -- CONTENTS\""
0 0 24 3 1 #" "
0 0 14 3 5 #"datum"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; Generic arithmetic procedures"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"add"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 13 #"apply-generic"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"add"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"sub"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 13 #"apply-generic"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"sub"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"mul"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 13 #"apply-generic"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"mul"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"div"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 13 #"apply-generic"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"div"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 76
(7
 #";;************************ COMPLEX NUMBERS SYSTEM *******************"
 #"*****;;"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;; RECTANGULAR"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 27 #"install-rectangular-package"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 22 #";; internal procedures"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"real-part"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"imag-part"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"make-from-real-imag"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"magnitude"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"sqrt"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 2 #" ("
0 0 14 3 9 #"real-part"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 6 #"square"
0 0 24 3 2 #" ("
0 0 14 3 9 #"imag-part"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"angle"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"atan"
0 0 24 3 2 #" ("
0 0 14 3 9 #"imag-part"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 3 #") ("
0 0 14 3 9 #"real-part"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"make-from-mag-ang"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cos"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 2 #" ("
0 0 14 3 3 #"sin"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 38 #";; interface to the rest of the system"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"tag"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 10 #"attach-tag"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 11 #"rectangular"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"real-part"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 11 #"rectangular"
0 0 24 3 2 #") "
0 0 14 3 9 #"real-part"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"imag-part"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 11 #"rectangular"
0 0 24 3 2 #") "
0 0 14 3 9 #"imag-part"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"magnitude"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 11 #"rectangular"
0 0 24 3 2 #") "
0 0 14 3 9 #"magnitude"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"angle"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 11 #"rectangular"
0 0 24 3 2 #") "
0 0 14 3 5 #"angle"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 19 #"make-from-real-imag"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 11 #"rectangular"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 3 #"tag"
0 0 24 3 2 #" ("
0 0 14 3 19 #"make-from-real-imag"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 17 #"make-from-mag-ang"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 11 #"rectangular"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #") ("
0 0 14 3 3 #"tag"
0 0 24 3 2 #" ("
0 0 14 3 17 #"make-from-mag-ang"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 14 3 29 #"SUCCESS---RECTANGULAR-PACKAGE"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";;; POLAR"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 21 #"install-polar-package"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 22 #";; internal procedures"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"magnitude"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"angle"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"make-from-mag-ang"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"real-part"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 9 #"magnitude"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cos"
0 0 24 3 2 #" ("
0 0 14 3 5 #"angle"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"imag-part"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 9 #"magnitude"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 3 #") ("
0 0 14 3 3 #"sin"
0 0 24 3 2 #" ("
0 0 14 3 5 #"angle"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"make-from-real-imag"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sqrt"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"atan"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 38 #";; interface to the rest of the system"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"tag"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 10 #"attach-tag"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"polar"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"real-part"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 5 #"polar"
0 0 24 3 2 #") "
0 0 14 3 9 #"real-part"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"imag-part"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 5 #"polar"
0 0 24 3 2 #") "
0 0 14 3 9 #"imag-part"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"magnitude"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 5 #"polar"
0 0 24 3 2 #") "
0 0 14 3 9 #"magnitude"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"angle"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 5 #"polar"
0 0 24 3 2 #") "
0 0 14 3 5 #"angle"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 19 #"make-from-real-imag"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"polar"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 3 #"tag"
0 0 24 3 2 #" ("
0 0 14 3 19 #"make-from-real-imag"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 17 #"make-from-mag-ang"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"polar"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #") ("
0 0 14 3 3 #"tag"
0 0 24 3 2 #" ("
0 0 14 3 17 #"make-from-mag-ang"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 14 3 22 #"SUCCESS--POLAR-PACKAGE"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"real-part"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 3 #") ("
0 0 14 3 13 #"apply-generic"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"real-part"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"imag-part"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 3 #") ("
0 0 14 3 13 #"apply-generic"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"imag-part"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"magnitude"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 3 #") ("
0 0 14 3 13 #"apply-generic"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"magnitude"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"angle"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 3 #") ("
0 0 14 3 13 #"apply-generic"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"angle"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 27 #"install-rectangular-package"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 21 #"install-polar-package"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(8
 #";;************************ ORDINARY PRIMITIVE NUMBERS ***************"
 #"*********;;"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 29 #"install-scheme-number-package"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"equ?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"=zero?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 3 15 #"               "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"add"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 4 #"real"
0 0 24 3 1 #" "
0 0 14 3 4 #"real"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"add"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 7 #"integer"
0 0 24 3 1 #" "
0 0 14 3 7 #"integer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"sub"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 4 #"real"
0 0 24 3 1 #" "
0 0 14 3 4 #"real"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"sub"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 7 #"integer"
0 0 24 3 1 #" "
0 0 14 3 7 #"integer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"mul"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 4 #"real"
0 0 24 3 1 #" "
0 0 14 3 4 #"real"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"mul"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 7 #"integer"
0 0 24 3 1 #" "
0 0 14 3 7 #"integer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"div"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 4 #"real"
0 0 24 3 1 #" "
0 0 14 3 4 #"real"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"div"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 7 #"integer"
0 0 24 3 1 #" "
0 0 14 3 7 #"integer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"make"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 13 #"scheme-number"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"equ?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 4 #"real"
0 0 24 3 1 #" "
0 0 14 3 4 #"real"
0 0 24 3 2 #") "
0 0 14 3 4 #"equ?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"equ?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 7 #"integer"
0 0 24 3 1 #" "
0 0 14 3 7 #"integer"
0 0 24 3 2 #") "
0 0 14 3 4 #"equ?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"=zero?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 13 #"scheme-number"
0 0 24 3 2 #") "
0 0 14 3 6 #"=zero?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 14 3 27 #"SUCCESS---PRIMITIVE-NUMBERS"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; Constructor for (tagged) ordinary numbers"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"make-scheme-number"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  (("
0 0 14 3 3 #"get"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"make"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 13 #"scheme-number"
0 0 24 3 2 #") "
0 0 14 3 1 #"n"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70
(9
 #";;************************ RATIONAL PACKAGE ************************;"
 #";"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 24 #"install-rational-package"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 22 #";; internal procedures"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"numer"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"denom"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-rat"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 1 #"g"
0 0 24 3 2 #" ("
0 0 14 3 3 #"gcd"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #") ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"add-rat"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 8 #"make-rat"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 5 #"numer"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 5 #"denom"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 5 #"numer"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 5 #"denom"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 5 #"denom"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 5 #"denom"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"sub-rat"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 8 #"make-rat"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 5 #"numer"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 5 #"denom"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 5 #"numer"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 5 #"denom"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 5 #"denom"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 5 #"denom"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"mul-rat"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 8 #"make-rat"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 5 #"numer"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 5 #"numer"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 5 #"denom"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 5 #"denom"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"div-rat"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 8 #"make-rat"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 5 #"numer"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 5 #"denom"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 5 #"denom"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 5 #"numer"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"equ?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"=zero?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 5 #"numer"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 34 #";; interface to rest of the system"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"tag"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 10 #"attach-tag"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"rational"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"add"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 8 #"rational"
0 0 24 3 1 #" "
0 0 14 3 8 #"rational"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 3 #"tag"
0 0 24 3 2 #" ("
0 0 14 3 7 #"add-rat"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"sub"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 8 #"rational"
0 0 24 3 1 #" "
0 0 14 3 8 #"rational"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 3 #"tag"
0 0 24 3 2 #" ("
0 0 14 3 7 #"sub-rat"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"mul"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 8 #"rational"
0 0 24 3 1 #" "
0 0 14 3 8 #"rational"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 3 #"tag"
0 0 24 3 2 #" ("
0 0 14 3 7 #"mul-rat"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"div"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 8 #"rational"
0 0 24 3 1 #" "
0 0 14 3 8 #"rational"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 3 #"tag"
0 0 24 3 2 #" ("
0 0 14 3 7 #"div-rat"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 61
#";; interface rational numbers selectors and to rest of system"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"numer"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"rational"
0 0 24 3 1 #" "
0 0 14 3 5 #"numer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"denom"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"rational"
0 0 24 3 1 #" "
0 0 14 3 5 #"denom"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"make"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"rational"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 3 #") ("
0 0 14 3 3 #"tag"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-rat"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"equ?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 8 #"rational"
0 0 24 3 1 #" "
0 0 14 3 8 #"rational"
0 0 24 3 2 #") "
0 0 14 3 4 #"equ?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"=zero?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 8 #"rational"
0 0 24 3 2 #") "
0 0 14 3 6 #"=zero?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 14 3 26 #"SUCCESS---RATIONAL-NUMBERS"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; Constructor for (tagged) rational numbers"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"make-rational"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  (("
0 0 14 3 3 #"get"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"make"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"rational"
0 0 24 3 2 #") "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 69
(10
 #";;************************ COMPLEX PACKAGE ************************;;"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 23 #"install-complex-package"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 58
#";; imported procedures from rectangular and polar packages"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"make-from-real-imag"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 3 #"get"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 19 #"make-from-real-imag"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 11 #"rectangular"
0 0 24 3 2 #") "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"make-from-mag-ang"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 3 #"get"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 17 #"make-from-mag-ang"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"polar"
0 0 24 3 2 #") "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 22 #";; internal procedures"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"add-complex"
0 0 24 3 1 #" "
0 0 14 3 2 #"z1"
0 0 24 3 1 #" "
0 0 14 3 2 #"z2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 19 #"make-from-real-imag"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 9 #"real-part"
0 0 24 3 1 #" "
0 0 14 3 2 #"z1"
0 0 24 3 3 #") ("
0 0 14 3 9 #"real-part"
0 0 24 3 1 #" "
0 0 14 3 2 #"z2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 9 #"imag-part"
0 0 24 3 1 #" "
0 0 14 3 2 #"z1"
0 0 24 3 3 #") ("
0 0 14 3 9 #"imag-part"
0 0 24 3 1 #" "
0 0 14 3 2 #"z2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"sub-complex"
0 0 24 3 1 #" "
0 0 14 3 2 #"z1"
0 0 24 3 1 #" "
0 0 14 3 2 #"z2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 19 #"make-from-real-imag"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 9 #"real-part"
0 0 24 3 1 #" "
0 0 14 3 2 #"z1"
0 0 24 3 3 #") ("
0 0 14 3 9 #"real-part"
0 0 24 3 1 #" "
0 0 14 3 2 #"z2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 9 #"imag-part"
0 0 24 3 1 #" "
0 0 14 3 2 #"z1"
0 0 24 3 3 #") ("
0 0 14 3 9 #"imag-part"
0 0 24 3 1 #" "
0 0 14 3 2 #"z2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"mul-complex"
0 0 24 3 1 #" "
0 0 14 3 2 #"z1"
0 0 24 3 1 #" "
0 0 14 3 2 #"z2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 17 #"make-from-mag-ang"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 9 #"magnitude"
0 0 24 3 1 #" "
0 0 14 3 2 #"z1"
0 0 24 3 3 #") ("
0 0 14 3 9 #"magnitude"
0 0 24 3 1 #" "
0 0 14 3 2 #"z2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 5 #"angle"
0 0 24 3 1 #" "
0 0 14 3 2 #"z1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"angle"
0 0 24 3 1 #" "
0 0 14 3 2 #"z2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"div-complex"
0 0 24 3 1 #" "
0 0 14 3 2 #"z1"
0 0 24 3 1 #" "
0 0 14 3 2 #"z2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 17 #"make-from-mag-ang"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 9 #"magnitude"
0 0 24 3 1 #" "
0 0 14 3 2 #"z1"
0 0 24 3 3 #") ("
0 0 14 3 9 #"magnitude"
0 0 24 3 1 #" "
0 0 14 3 2 #"z2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 5 #"angle"
0 0 24 3 1 #" "
0 0 14 3 2 #"z1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"angle"
0 0 24 3 1 #" "
0 0 14 3 2 #"z2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"equ?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 6 #"type-x"
0 0 24 3 2 #" ("
0 0 14 3 8 #"type-tag"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 6 #"type-y"
0 0 24 3 2 #" ("
0 0 14 3 8 #"type-tag"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"mag-diff"
0 0 24 3 2 #" ("
0 0 14 3 3 #"abs"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 9 #"magnitude"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 9 #"magnitude"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 6 #"type-x"
0 0 24 3 1 #" "
0 0 14 3 6 #"type-y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 14 3 8 #"mag-diff"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 6 #"type-x"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 11 #"rectangular"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.0"
0 0 24 3 2 #" ("
0 0 14 3 9 #"real-part"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.0"
0 0 24 3 2 #" ("
0 0 14 3 9 #"real-part"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.0"
0 0 24 3 2 #" ("
0 0 14 3 9 #"imag-part"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.0"
0 0 24 3 2 #" ("
0 0 14 3 9 #"imag-part"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"=zero?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"<="
0 0 24 3 2 #" ("
0 0 14 3 9 #"magnitude"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 21 3 6 #"0.0001"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 34 #";; interface to rest of the system"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"tag"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 3 #") ("
0 0 14 3 10 #"attach-tag"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"complex"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"real-part"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 7 #"complex"
0 0 24 3 2 #") "
0 0 14 3 9 #"real-part"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"imag-part"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 7 #"complex"
0 0 24 3 2 #") "
0 0 14 3 9 #"imag-part"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"magnitude"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 7 #"complex"
0 0 24 3 2 #") "
0 0 14 3 9 #"magnitude"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"angle"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 7 #"complex"
0 0 24 3 2 #") "
0 0 14 3 5 #"angle"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"add"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 7 #"complex"
0 0 24 3 1 #" "
0 0 14 3 7 #"complex"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"z1"
0 0 24 3 1 #" "
0 0 14 3 2 #"z2"
0 0 24 3 3 #") ("
0 0 14 3 3 #"tag"
0 0 24 3 2 #" ("
0 0 14 3 11 #"add-complex"
0 0 24 3 1 #" "
0 0 14 3 2 #"z1"
0 0 24 3 1 #" "
0 0 14 3 2 #"z2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"sub"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 7 #"complex"
0 0 24 3 1 #" "
0 0 14 3 7 #"complex"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"z1"
0 0 24 3 1 #" "
0 0 14 3 2 #"z2"
0 0 24 3 3 #") ("
0 0 14 3 3 #"tag"
0 0 24 3 2 #" ("
0 0 14 3 11 #"sub-complex"
0 0 24 3 1 #" "
0 0 14 3 2 #"z1"
0 0 24 3 1 #" "
0 0 14 3 2 #"z2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"mul"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 7 #"complex"
0 0 24 3 1 #" "
0 0 14 3 7 #"complex"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"z1"
0 0 24 3 1 #" "
0 0 14 3 2 #"z2"
0 0 24 3 3 #") ("
0 0 14 3 3 #"tag"
0 0 24 3 2 #" ("
0 0 14 3 11 #"mul-complex"
0 0 24 3 1 #" "
0 0 14 3 2 #"z1"
0 0 24 3 1 #" "
0 0 14 3 2 #"z2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"div"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 7 #"complex"
0 0 24 3 1 #" "
0 0 14 3 7 #"complex"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"z1"
0 0 24 3 1 #" "
0 0 14 3 2 #"z2"
0 0 24 3 3 #") ("
0 0 14 3 3 #"tag"
0 0 24 3 2 #" ("
0 0 14 3 11 #"div-complex"
0 0 24 3 1 #" "
0 0 14 3 2 #"z1"
0 0 24 3 1 #" "
0 0 14 3 2 #"z2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 19 #"make-from-real-imag"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"complex"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 3 #"tag"
0 0 24 3 2 #" ("
0 0 14 3 19 #"make-from-real-imag"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 17 #"make-from-mag-ang"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"complex"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #") ("
0 0 14 3 3 #"tag"
0 0 24 3 2 #" ("
0 0 14 3 17 #"make-from-mag-ang"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"equ?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 7 #"complex"
0 0 24 3 1 #" "
0 0 14 3 7 #"complex"
0 0 24 3 2 #") "
0 0 14 3 4 #"equ?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"=zero?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 7 #"complex"
0 0 24 3 2 #") "
0 0 14 3 6 #"=zero?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 14 3 25 #"SUCCESS---COMPLEX-PACKAGE"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; Constructor for (tagged) complex numbers"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 27 #"make-complex-from-real-imag"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  (("
0 0 14 3 3 #"get"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 19 #"make-from-real-imag"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"complex"
0 0 24 3 2 #") "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 25 #"make-complex-from-mag-ang"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  (("
0 0 14 3 3 #"get"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 17 #"make-from-mag-ang"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"complex"
0 0 24 3 2 #") "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";; Install packages"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 29 #"install-scheme-number-package"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 24 #"install-rational-package"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 23 #"install-complex-package"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";; Equality procedure"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"equ?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 13 #"apply-generic"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"equ?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";;************************ COERCION ************************;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; complex"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";   ^"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";   |"
0 0 24 29 1 #"\n"
0 0 17 3 6 #"; real"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";   ^"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";   |"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; rational"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";   ^"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";   |"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; integer"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 75
(11
 #";;************************ COERCION TABLE: RAISE ********************"
 #"****;;"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 30 #"install-coercion-package-raise"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"numer"
0 0 24 3 2 #" ("
0 0 14 3 3 #"get"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"numer"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"rational"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"denom"
0 0 24 3 2 #" ("
0 0 14 3 3 #"get"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"denom"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"rational"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"int->rat"
0 0 24 3 1 #" "
0 0 14 3 3 #"int"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"make-rational"
0 0 24 3 2 #" ("
0 0 14 3 8 #"contents"
0 0 24 3 1 #" "
0 0 14 3 3 #"int"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"rat->real"
0 0 24 3 1 #" "
0 0 14 3 3 #"rat"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"attach-tag"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"real"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 5 #"numer"
0 0 24 3 2 #" ("
0 0 14 3 8 #"contents"
0 0 24 3 1 #" "
0 0 14 3 3 #"rat"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"denom"
0 0 24 3 2 #" ("
0 0 14 3 8 #"contents"
0 0 24 3 1 #" "
0 0 14 3 3 #"rat"
0 0 24 3 4 #"))) "
0 0 21 3 3 #"1.0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"real->complex"
0 0 24 3 1 #" "
0 0 14 3 4 #"real"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 27 #"make-complex-from-real-imag"
0 0 24 3 2 #" ("
0 0 14 3 8 #"contents"
0 0 24 3 1 #" "
0 0 14 3 4 #"real"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"put-coercion"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"integer"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"rational"
0 0 24 3 1 #" "
0 0 14 3 8 #"int->rat"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"put-coercion"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"rational"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"real"
0 0 24 3 1 #" "
0 0 14 3 9 #"rat->real"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"put-coercion"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"real"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"complex"
0 0 24 3 1 #" "
0 0 14 3 13 #"real->complex"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 14 3 23 #"SUCCESS---RAISE-PACKAGE"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 30 #"install-coercion-package-raise"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 111
(12
 #";;************************ INSTALL RAISE PROCEDURES INTO RELEVANT ARI"
 #"THMETIC INDICES ************************;;"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 21 #"install-raise-package"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"int->rat"
0 0 24 3 1 #" "
0 0 14 3 3 #"int"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"get-coercion"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"integer"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"rational"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"rat->real"
0 0 24 3 1 #" "
0 0 14 3 3 #"rat"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"get-coercion"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"rational"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"real"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"real->complex"
0 0 24 3 1 #" "
0 0 14 3 4 #"real"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"get-coercion"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"real"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"complex"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"raise"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 7 #"integer"
0 0 24 3 2 #") "
0 0 14 3 8 #"int->rat"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"raise"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 8 #"rational"
0 0 24 3 2 #") "
0 0 14 3 9 #"rat->real"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"raise"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 4 #"real"
0 0 24 3 2 #") "
0 0 14 3 13 #"real->complex"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 14 3 37 #"SUCCESS---INSTALLED-RAISED-PROCEDURES"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 77
(13
 #";;************************ COERCION TABLE: PROJECT ******************"
 #"******;;"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 32 #"install-coercion-package-project"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"numer"
0 0 24 3 2 #" ("
0 0 14 3 3 #"get"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"numer"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"rational"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"denom"
0 0 24 3 2 #" ("
0 0 14 3 3 #"get"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"denom"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"rational"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"complex->real"
0 0 24 3 1 #" "
0 0 14 3 7 #"complex"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"attach-tag"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"real"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 9 #"real-part"
0 0 24 3 2 #" ("
0 0 14 3 8 #"contents"
0 0 24 3 1 #" "
0 0 14 3 7 #"complex"
0 0 24 3 3 #")) "
0 0 21 3 3 #"1.0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"real->rat"
0 0 24 3 1 #" "
0 0 14 3 4 #"real"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"make-rational"
0 0 24 3 2 #" ("
0 0 14 3 5 #"round"
0 0 24 3 2 #" ("
0 0 14 3 8 #"contents"
0 0 24 3 1 #" "
0 0 14 3 4 #"real"
0 0 24 3 3 #")) "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"rat->int"
0 0 24 3 1 #" "
0 0 14 3 3 #"rat"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"attach-tag"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"integer"
0 0 24 3 2 #" ("
0 0 14 3 5 #"round"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 5 #"numer"
0 0 24 3 2 #" ("
0 0 14 3 8 #"contents"
0 0 24 3 1 #" "
0 0 14 3 3 #"rat"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"denom"
0 0 24 3 2 #" ("
0 0 14 3 8 #"contents"
0 0 24 3 1 #" "
0 0 14 3 3 #"rat"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"put-coercion"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"complex"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"real"
0 0 24 3 1 #" "
0 0 14 3 13 #"complex->real"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"put-coercion"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"real"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"rat"
0 0 24 3 1 #" "
0 0 14 3 9 #"real->rat"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"put-coercion"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"rat"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"int"
0 0 24 3 1 #" "
0 0 14 3 8 #"rat->int"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 14 3 25 #"SUCCESS---PROJECT-PACKAGE"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 32 #"install-coercion-package-project"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 104
(14
 #";;************************ INSTALL PROJECT PROCEDURES INTO ARITHMETIC"
 #" INDICES ************************;;"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 23 #"install-project-package"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"complex->real"
0 0 24 3 1 #" "
0 0 14 3 7 #"complex"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"get-coercion"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"complex"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"real"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"real->rat"
0 0 24 3 1 #" "
0 0 14 3 4 #"real"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"get-coercion"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"real"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"rat"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"rat->int"
0 0 24 3 1 #" "
0 0 14 3 3 #"rat"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"get-coercion"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"rat"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"int"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"project"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 7 #"complex"
0 0 24 3 2 #") "
0 0 14 3 13 #"complex->real"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"project"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 4 #"real"
0 0 24 3 2 #") "
0 0 14 3 9 #"real->rat"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"project"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 8 #"rational"
0 0 24 3 2 #") "
0 0 14 3 8 #"rat->int"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 14 3 38 #"SUCCESS---INSTALLED-PROJECT-PROCEDURES"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 21 #"install-raise-package"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 23 #"install-project-package"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";; TYPE HIERARCHY"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"tower"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 7 #"integer"
0 0 24 3 1 #" "
0 0 14 3 8 #"rational"
0 0 24 3 1 #" "
0 0 14 3 4 #"real"
0 0 24 3 1 #" "
0 0 14 3 7 #"complex"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";; GENERAL RAISE AND DROP PROCEDURES"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"raise"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 13 #"apply-generic"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"raise"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 2 #") "
0 0 14 3 3 #"num"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"drop"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 7 #"lowered"
0 0 24 3 3 #" (("
0 0 14 3 13 #"apply-generic"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"project"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 2 #") "
0 0 14 3 3 #"num"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 10 #"raisedBack"
0 0 24 3 2 #" ("
0 0 14 3 5 #"raise"
0 0 24 3 1 #" "
0 0 14 3 7 #"lowered"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 4 #"equ?"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 10 #"raisedBack"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 7 #"lowered"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 3 #"num"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 87
(15
 #";;************************ PROCEDURES FOR SUCCESSIVE RAISING ********"
 #"****************;;"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 114
(16
 #";; the procedures above this section are for raising and dropping a v"
 #"ariable's type by one level in the hierarchy."
) 0 0 24 29 1 #"\n"
0 0 17 3 109
(17
 #";; the procedures below will handle the successive raising of these v"
 #"ariables according to the provided tower"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"arithmetic-tower"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 7 #"integer"
0 0 24 3 1 #" "
0 0 14 3 8 #"rational"
0 0 24 3 1 #" "
0 0 14 3 4 #"real"
0 0 24 3 1 #" "
0 0 14 3 7 #"complex"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"apply-generic"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 28 3 1 #"."
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 82
(18
 #";; apply-generic coerces its arguments to have the same type by succe"
 #"ssive raising"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 9 #"type-tags"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 8 #"type-tag"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 4 #"))) "
0 0 17 3 79
(19
 #";; type-tags is a list containing the type tags of each of the argume"
 #"nts passed"
) 0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"proc"
0 0 24 3 2 #" ("
0 0 14 3 3 #"get"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 9 #"type-tags"
0 0 24 3 4 #"))) "
0 0 17 3 76
(20
 #";; lookup into the table using get, the operation, and the list of ty"
 #"pe tags"
) 0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 11 #"higher-type"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"higher"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"type-tags"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 9 #"type-tags"
0 0 24 3 2 #") "
0 0 14 3 16 #"arithmetic-tower"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")) "
0 0 17 3 44 #";; the type of the argument with higher type"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 10 #"lower-type"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"lower"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"type-tags"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 9 #"type-tags"
0 0 24 3 2 #") "
0 0 14 3 16 #"arithmetic-tower"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 5 #")))  "
0 0 17 3 43 #";; the type of the argument with lower type"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"lowerNum"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 10 #"lower-type"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"item"
0 0 24 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"type-tag"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 2 #") "
0 0 14 3 10 #"lower-type"
0 0 24 3 3 #")) "
0 0 14 3 4 #"args"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")) "
0 0 17 3 55 #";; returns the argument of the lower type which will be"
0 0 17 11 1 #" "
0 0 17 3 6 #"raised"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"higherNum"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 10 #"lower-type"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"item"
0 0 24 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"type-tag"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 2 #") "
0 0 14 3 11 #"higher-type"
0 0 24 3 3 #")) "
0 0 14 3 4 #"args"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 12 #"raised-lower"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 11 #"higher-type"
0 0 24 3 2 #" ("
0 0 14 3 11 #"raise-tower"
0 0 24 3 1 #" "
0 0 14 3 11 #"higher-type"
0 0 24 3 1 #" "
0 0 14 3 16 #"arithmetic-tower"
0 0 24 3 1 #" "
0 0 14 3 8 #"lowerNum"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 5 #")))  "
0 0 17 3 67
#";; the argument with lower type after being raised to a higher type"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 17 3 25 #";; if procedure is found,"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 8 #"contents"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #")) "
0 0 17 11 127
(21
 #";; (map contents args) returns a list of the contents of each of the "
 #"arguments. apply will then apply the procedure on each of "
) 0 0 17 3 15 #"these contents."
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 12 #"raised-lower"
0 0 24 3 1 #" "
0 0 17 3 25 #";; if raised lower exists"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 13 #"apply-generic"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 12 #"raised-lower"
0 0 24 3 1 #" "
0 0 14 3 9 #"higherNum"
0 0 24 3 3 #")  "
0 0 17 3 62
#";; then call apply-generic with two arguments of the same type"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 5 #"error"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 19 3 1 #"\""
0 0 19 3 2 #"No"
0 0 19 3 1 #" "
0 0 19 3 6 #"method"
0 0 19 3 1 #" "
0 0 19 3 3 #"for"
0 0 19 3 1 #" "
0 0 19 3 5 #"these"
0 0 19 3 1 #" "
0 0 19 3 5 #"types"
0 0 19 3 1 #" "
0 0 19 3 2 #"--"
0 0 19 3 14 #" APPLY-GENERIC"
0 0 19 3 1 #"\""
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 9 #"type-tags"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 5 #"error"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 19 3 1 #"\""
0 0 19 3 2 #"No"
0 0 19 3 1 #" "
0 0 19 3 6 #"method"
0 0 19 3 1 #" "
0 0 19 3 3 #"for"
0 0 19 3 1 #" "
0 0 19 3 5 #"these"
0 0 19 3 1 #" "
0 0 19 3 5 #"types"
0 0 19 3 1 #" "
0 0 19 3 2 #"--"
0 0 19 3 1 #" "
0 0 19 3 14 #"APPLY-GENERIC\""
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 9 #"type-tags"
0 0 24 3 11 #")))))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"raise-tower"
0 0 24 3 1 #" "
0 0 14 3 7 #"type-to"
0 0 24 3 1 #" "
0 0 14 3 5 #"tower"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 2 #") "
0 0 17 3 98
(22
 #";; raises the type of argument until it reaches intended type. return"
 #"s the number with raised type"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 9 #"type-from"
0 0 24 3 2 #" ("
0 0 14 3 8 #"type-tag"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 9 #"shortened"
0 0 24 3 2 #" ("
0 0 14 3 4 #"memq"
0 0 24 3 1 #" "
0 0 14 3 9 #"type-from"
0 0 24 3 1 #" "
0 0 14 3 5 #"tower"
0 0 24 3 5 #")))  "
0 0 17 3 76
(23
 #";; cuts the tower into shorter tower where type-from is the new lowes"
 #"t level"
) 0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"iter"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 3 #"twr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 7 #"tp-from"
0 0 24 3 2 #" ("
0 0 14 3 8 #"type-tag"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 3 #"twr"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")  "
0 0 17 3 34 #";; if tower is empty, return false"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 7 #"tp-from"
0 0 24 3 1 #" "
0 0 14 3 7 #"type-to"
0 0 24 3 2 #") "
0 0 14 3 3 #"num"
0 0 24 3 3 #")  "
0 0 17 3 79
(24
 #";; if our type reaches the intended type, then return the number of r"
 #"aised type"
) 0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 4 #"iter"
0 0 24 3 2 #" ("
0 0 14 3 5 #"raise"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"twr"
0 0 24 3 7 #")))))) "
0 0 17 3 104
(25
 #";; else, return the iteration with tp-from raised to it's higher leve"
 #"l, and we further shorten the tower"
) 0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 9 #"shortened"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"iter"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 9 #"shortened"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 21 3 2 #"#f"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 81
(26
 #";; **************************** TEST ********************************"
 #"********* ;;"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";; NOTES ;;"
0 0 24 29 1 #"\n"
0 0 17 3 73
(27
 #"; drop hasn't been implemented into the system, but tests are added b"
 #"elow"
) 0 0 24 29 1 #"\n"
0 0 17 3 70
(28
 #"; no checks has been make for raising complex, and dropping an intege"
 #"r"
) 0 0 24 29 1 #"\n"
0 0 17 3 107
(29
 #"; raise and drops for complex has only been added for rectangular for"
 #"m. it will not work for imaginary form"
) 0 0 24 29 1 #"\n"
0 0 17 3 80
(30
 #"; this version doesn't allow more than two arguments in the arithmeti"
 #"c functions"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";; Test variables"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-int"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"b-int"
0 0 24 3 1 #" "
0 0 21 3 3 #"234"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-rat"
0 0 24 3 2 #" ("
0 0 14 3 13 #"make-rational"
0 0 24 3 1 #" "
0 0 21 3 2 #"12"
0 0 24 3 1 #" "
0 0 21 3 3 #"134"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"b-rat"
0 0 24 3 2 #" ("
0 0 14 3 13 #"make-rational"
0 0 24 3 1 #" "
0 0 21 3 3 #"124"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-real"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"b-real"
0 0 24 3 1 #" "
0 0 21 3 6 #"12.512"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"a-complex"
0 0 24 3 2 #" ("
0 0 14 3 27 #"make-complex-from-real-imag"
0 0 24 3 1 #" "
0 0 21 3 2 #"12"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"b-complex"
0 0 24 3 2 #" ("
0 0 14 3 27 #"make-complex-from-real-imag"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 2 #"13"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"c-complex"
0 0 24 3 2 #" ("
0 0 14 3 25 #"make-complex-from-mag-ang"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"d-complex"
0 0 24 3 2 #" ("
0 0 14 3 25 #"make-complex-from-mag-ang"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 41 #"\"***************RAISE*******************\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";; (raise num): raises a number one level up the tower."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 5 #"raise"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-int"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 5 #"raise"
0 0 24 3 1 #" "
0 0 14 3 5 #"b-int"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 5 #"raise"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-rat"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 5 #"raise"
0 0 24 3 1 #" "
0 0 14 3 5 #"b-rat"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 5 #"raise"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-real"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 5 #"raise"
0 0 24 3 1 #" "
0 0 14 3 6 #"b-real"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; OUTPUT:"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 8 #"rational"
0 0 17 3 1 #" "
0 0 17 3 3 #"10 "
0 0 17 3 1 #"."
0 0 17 3 3 #" 1)"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 8 #"rational"
0 0 17 3 1 #" "
0 0 17 3 3 #"234"
0 0 17 3 1 #" "
0 0 17 3 1 #"."
0 0 17 3 3 #" 1)"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";0.08955223880597014"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";0.2857142857142857"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 7 #"complex"
0 0 17 3 1 #" "
0 0 17 3 11 #"rectangular"
0 0 17 3 1 #" "
0 0 17 3 3 #"1.0"
0 0 17 3 1 #" "
0 0 17 3 1 #"."
0 0 17 3 3 #" 0)"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 7 #"complex"
0 0 17 3 1 #" "
0 0 17 3 11 #"rectangular"
0 0 17 3 1 #" "
0 0 17 3 6 #"12.512"
0 0 17 3 1 #" "
0 0 17 3 1 #"."
0 0 17 3 3 #" 0)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 41 #"******************DROP******************\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";; (drop num): drops a number one level down the tower."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"drop"
0 0 24 3 1 #" "
0 0 14 3 9 #"a-complex"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"drop"
0 0 24 3 1 #" "
0 0 14 3 9 #"b-complex"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"drop"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-real"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"drop"
0 0 24 3 1 #" "
0 0 14 3 6 #"b-real"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"drop"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-rat"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"drop"
0 0 24 3 1 #" "
0 0 14 3 5 #"b-rat"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; OUTPUT:"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";12.0"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 7 #"complex"
0 0 17 3 1 #" "
0 0 17 3 11 #"rectangular"
0 0 17 3 1 #" "
0 0 17 3 2 #"10"
0 0 17 3 1 #" "
0 0 17 3 1 #"."
0 0 17 3 1 #" "
0 0 17 3 3 #"13)"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 8 #"rational"
0 0 17 3 1 #" "
0 0 17 3 3 #"1.0"
0 0 17 3 1 #" "
0 0 17 3 1 #"."
0 0 17 3 1 #" "
0 0 17 3 4 #"1.0)"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";12.512"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 8 #"rational"
0 0 17 3 1 #" "
0 0 17 3 1 #"6"
0 0 17 3 1 #" "
0 0 17 3 1 #"."
0 0 17 3 1 #" "
0 0 17 3 3 #"67)"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";62"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 49 #"\"******************RAISE-TOWER******************\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 108
(31
 #";; (raise-tower type-to tower num): raises a number successively up t"
 #"he tower until it reaches level type-to"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 11 #"raise-tower"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"complex"
0 0 24 3 1 #" "
0 0 14 3 16 #"arithmetic-tower"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-int"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 11 #"raise-tower"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"complex"
0 0 24 3 1 #" "
0 0 14 3 16 #"arithmetic-tower"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-rat"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 11 #"raise-tower"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"complex"
0 0 24 3 1 #" "
0 0 14 3 16 #"arithmetic-tower"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-real"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 11 #"raise-tower"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"rational"
0 0 24 3 1 #" "
0 0 14 3 16 #"arithmetic-tower"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-int"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 11 #"raise-tower"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"real"
0 0 24 3 1 #" "
0 0 14 3 16 #"arithmetic-tower"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-int"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 11 #"raise-tower"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"real"
0 0 24 3 1 #" "
0 0 14 3 16 #"arithmetic-tower"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-rat"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; OUTPUT:"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 7 #"complex"
0 0 17 3 1 #" "
0 0 17 3 11 #"rectangular"
0 0 17 3 1 #" "
0 0 17 3 4 #"10.0"
0 0 17 3 1 #" "
0 0 17 3 1 #"."
0 0 17 3 1 #" "
0 0 17 3 2 #"0)"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 7 #"complex"
0 0 17 3 1 #" "
0 0 17 3 11 #"rectangular"
0 0 17 3 1 #" "
0 0 17 3 19 #"0.08955223880597014"
0 0 17 3 1 #" "
0 0 17 3 1 #"."
0 0 17 3 1 #" "
0 0 17 3 2 #"0)"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 7 #"complex"
0 0 17 3 1 #" "
0 0 17 3 11 #"rectangular"
0 0 17 3 1 #" "
0 0 17 3 3 #"1.0"
0 0 17 3 1 #" "
0 0 17 3 1 #"."
0 0 17 3 1 #" "
0 0 17 3 2 #"0)"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 8 #"rational"
0 0 17 3 1 #" "
0 0 17 3 2 #"10"
0 0 17 3 1 #" "
0 0 17 3 1 #"."
0 0 17 3 1 #" "
0 0 17 3 2 #"1)"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";10.0"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";0.08955223880597014"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 46 #"\"******************ADDITION******************\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; (add x y)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"add"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-int"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-rat"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"add"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-int"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-real"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"add"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-int"
0 0 24 3 1 #" "
0 0 14 3 9 #"a-complex"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"add"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-int"
0 0 24 3 1 #" "
0 0 14 3 5 #"b-int"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"add"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-rat"
0 0 24 3 1 #" "
0 0 14 3 6 #"b-real"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"add"
0 0 24 3 1 #" "
0 0 14 3 9 #"a-complex"
0 0 24 3 1 #" "
0 0 14 3 5 #"b-int"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; OUTPUT:"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 8 #"rational"
0 0 17 3 1 #" "
0 0 17 3 3 #"676"
0 0 17 3 1 #" "
0 0 17 3 1 #"."
0 0 17 3 1 #" "
0 0 17 3 3 #"67)"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";11.0"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 7 #"complex"
0 0 17 3 1 #" "
0 0 17 3 11 #"rectangular"
0 0 17 3 1 #" "
0 0 17 3 4 #"22.0"
0 0 17 3 1 #" "
0 0 17 3 1 #"."
0 0 17 3 1 #" "
0 0 17 3 2 #"0)"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";244"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";12.60155223880597"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 7 #"complex"
0 0 17 3 1 #" "
0 0 17 3 11 #"rectangular"
0 0 17 3 1 #" "
0 0 17 3 5 #"246.0"
0 0 17 3 1 #" "
0 0 17 3 1 #"."
0 0 17 3 1 #" "
0 0 17 3 2 #"0)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 49 #"\"******************SUBTRACTION******************\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; (sub x y)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"sub"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-int"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-rat"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"sub"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-int"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-real"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"sub"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-int"
0 0 24 3 1 #" "
0 0 14 3 9 #"a-complex"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"sub"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-int"
0 0 24 3 1 #" "
0 0 14 3 5 #"b-int"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"sub"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-rat"
0 0 24 3 1 #" "
0 0 14 3 6 #"b-real"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"sub"
0 0 24 3 1 #" "
0 0 14 3 9 #"a-complex"
0 0 24 3 1 #" "
0 0 14 3 5 #"b-int"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";OUTPUT:"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 8 #"rational"
0 0 17 3 1 #" "
0 0 17 3 3 #"664"
0 0 17 3 1 #" "
0 0 17 3 1 #"."
0 0 17 3 1 #" "
0 0 17 3 3 #"67)"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";9.0"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 7 #"complex"
0 0 17 3 1 #" "
0 0 17 3 11 #"rectangular"
0 0 17 3 1 #" "
0 0 17 3 4 #"-2.0"
0 0 17 3 1 #" "
0 0 17 3 1 #"."
0 0 17 3 1 #" "
0 0 17 3 2 #"0)"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";-224"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";-12.42244776119403"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 7 #"complex"
0 0 17 3 1 #" "
0 0 17 3 11 #"rectangular"
0 0 17 3 1 #" "
0 0 17 3 5 #"222.0"
0 0 17 3 1 #" "
0 0 17 3 1 #"."
0 0 17 3 1 #" "
0 0 17 3 2 #"0)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 46 #"\"******************DIVISION******************\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; (div x y)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"div"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-int"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-rat"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"div"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-int"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-real"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"div"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-int"
0 0 24 3 1 #" "
0 0 14 3 9 #"a-complex"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"div"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-int"
0 0 24 3 1 #" "
0 0 14 3 5 #"b-int"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"div"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-rat"
0 0 24 3 1 #" "
0 0 14 3 6 #"b-real"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"div"
0 0 24 3 1 #" "
0 0 14 3 9 #"a-complex"
0 0 24 3 1 #" "
0 0 14 3 5 #"b-int"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";OUTPUT"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 8 #"rational"
0 0 17 3 1 #" "
0 0 17 3 3 #"335"
0 0 17 3 1 #" "
0 0 17 3 1 #"."
0 0 17 3 1 #" "
0 0 17 3 2 #"3)"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";10.0"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 7 #"complex"
0 0 17 3 1 #" "
0 0 17 3 5 #"polar"
0 0 17 3 1 #" "
0 0 17 3 18 #"0.8333333333333334"
0 0 17 3 1 #" "
0 0 17 3 1 #"."
0 0 17 3 1 #" "
0 0 17 3 2 #"0)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 8          10 17 6 #"5/117\0"
3 #"#e\0"
6 #"mixed\0"
2 #"1\0"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";0.007157308088712447"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 7 #"complex"
0 0 17 3 1 #" "
0 0 17 3 5 #"polar"
0 0 17 3 1 #" "
0 0 17 3 4 #"19.5"
0 0 17 3 1 #" "
0 0 17 3 1 #"."
0 0 17 3 1 #" "
0 0 17 3 2 #"0)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 46 #"\"******************DIVISION******************\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; (mul x y)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"mul"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-int"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-rat"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"mul"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-int"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-real"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"mul"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-int"
0 0 24 3 1 #" "
0 0 14 3 9 #"a-complex"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"mul"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-int"
0 0 24 3 1 #" "
0 0 14 3 5 #"b-int"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"mul"
0 0 24 3 1 #" "
0 0 14 3 5 #"a-rat"
0 0 24 3 1 #" "
0 0 14 3 6 #"b-real"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"mul"
0 0 24 3 1 #" "
0 0 14 3 9 #"a-complex"
0 0 24 3 1 #" "
0 0 14 3 5 #"b-int"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";OUTPUT:"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 8 #"rational"
0 0 17 3 1 #" "
0 0 17 3 2 #"60"
0 0 17 3 1 #" "
0 0 17 3 1 #"."
0 0 17 3 1 #" "
0 0 17 3 3 #"67)"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";10.0"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 7 #"complex"
0 0 17 3 1 #" "
0 0 17 3 5 #"polar"
0 0 17 3 1 #" "
0 0 17 3 5 #"120.0"
0 0 17 3 1 #" "
0 0 17 3 1 #"."
0 0 17 3 1 #" "
0 0 17 3 2 #"0)"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";2340"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";1.1204776119402984"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 7 #"complex"
0 0 17 3 1 #" "
0 0 17 3 5 #"polar"
0 0 17 3 1 #" "
0 0 17 3 6 #"2808.0"
0 0 17 3 1 #" "
0 0 17 3 1 #"."
0 0 17 3 1 #" "
0 0 17 3 2 #"0)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0           0
