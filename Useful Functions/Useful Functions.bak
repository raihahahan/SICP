#lang scheme
;; Contents

; 1. square x
; 2. average of x and y
; 3. fixed-point
; 4. dx
; 5. cube x
; 6. newtons-transform
; 7. newtons-method
; 8. sqrt (using newtons-method)

(define (square x)
  (* x x))

(define (average x y)
  (/ (+ x y) 2))

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) 0.000001))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))

(define dx 0.00001)

(define (deriv g)
  (lambda (x)
      (/ (- (g (+ x dx)) (g x))
         dx)))

(define (cube x) (* x x x))

(define (newtons-transform g)
  (lambda (x)
    (- x (/ (g x)
            ((deriv g) x)))
            )
       )

(define (newtons-method g guess)
  (fixed-point (newtons-transform g) guess))

(define (sqrt x)
  (newtons-method (lambda (y) (- (square y) x)) 1.0))